package controllers

import org.scalatest.concurrent.{Eventually, ScalaFutures}
import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.should.Matchers
import org.scalatest.time.{Millis, Seconds, Span}
import org.scalatest.{BeforeAndAfterEach, Inside}
import org.scalatestplus.play.{ConfiguredServer, WsScalaTestClient}
import play.api.libs.ws.WSClient

import scala.reflect.ClassTag

trait BaseControllersSpec extends AnyFlatSpec
  with Matchers
  with ConfiguredServer
  with ScalaFutures
  with Inside
  with Eventually
  with BeforeAndAfterEach
  with WsScalaTestClient {

  implicit val defaultPatience: PatienceConfig = PatienceConfig(
    timeout = Span(5, Seconds),
    interval = Span(100, Millis)
  )

  private def inject[T: ClassTag]: T = app.injector.instanceOf[T]

  implicit lazy val wsClient: WSClient = inject[WSClient]

  protected def exampleId: String

  private lazy val baseUrl = "/scommons-examples"

  private lazy val commonAssetsUrl = s"$baseUrl/assets/lib/scommons-client-assets"

  it should "load bootstrap.min.css" in {
    //given
    val request = wsUrl(s"$commonAssetsUrl/css/bootstrap.min.css")

    //when
    val response = request.get.futureValue

    //then
    response.status shouldBe 200
    response.contentType shouldBe "text/css; charset=UTF-8"

    response.body should include ("Bootstrap v2.3.1")
  }

  it should "load custom.css" in {
    //given
    val request = wsUrl(s"$commonAssetsUrl/css/custom.css")

    //when
    val response = request.get.futureValue

    //then
    response.status shouldBe 200
    response.contentType shouldBe "text/css; charset=UTF-8"

    response.body should include (".scommons-modal")
  }

  it should "load styles assets generated by webpack" in {
    //given
    val request = wsUrl(s"$baseUrl/assets/styles/scommons-examples-$exampleId-fastopt.css")

    //when
    val response = request.get.futureValue

    //then
    response.status shouldBe 200
    response.contentType shouldBe "text/css; charset=UTF-8"

    response.body should include ("background: url(data:image/png;base64")
  }

  it should "load javascript assets generated by webpack" in {
    //given
    val request = wsUrl(s"$baseUrl/assets/scommons-examples-$exampleId-fastopt.js")

    //when
    val response = request.get.futureValue

    //then
    response.status shouldBe 200
    response.contentType shouldBe "application/javascript; charset=UTF-8"
  }

  it should "load index.html page" in {
    //given
    val request = wsUrl(s"$baseUrl/$exampleId.html")

    //when
    val response = request.get.futureValue

    //then
    response.status shouldBe 200
    response.contentType shouldBe "text/html; charset=UTF-8"

    val pageSource = response.body
    pageSource should include (s"$baseUrl/assets/styles/scommons-examples-$exampleId-fastopt.css")
    pageSource should include (s"$baseUrl/assets/scommons-examples-$exampleId-fastopt-library.js")
    pageSource should include (s"$baseUrl/assets/scommons-examples-$exampleId-fastopt-loader.js")
    pageSource should include (s"$baseUrl/assets/scommons-examples-$exampleId-fastopt.js")
  }
}
